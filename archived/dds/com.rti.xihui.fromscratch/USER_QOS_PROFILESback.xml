<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Description
An RTI Connext QoS Profile that provides strictly
reliable communication. It is not tuned for maximum throughput - see
high_throughput.xml for a more aggressive configuration - but provides a
reasonable balance between latency and throughput for a variety of
applications.

Strict reliability depends primarily on:

Data writer:
  - reliability: RELIABLE_RELIABILITY_QOS to enable heartbeating
  - history: KEEP_ALL_HISTORY_QOS
             to prevent the writer from overwriting unacknowledged samples
             with new data

Data reader:
  - reliability: RELIABLE_RELIABILITY_QOS to enable acknowledgements
  - history: KEEP_ALL_HISTORY_QOS
             to prevent the reader from overwriting undelivered samples
             with new data

-->

<!-- ================================================================= -->
<!-- Strictly Reliable Profile                                         -->
<!-- ================================================================= -->

<!--
Your XML editor may be able to provide validation and auto-completion services
as you type. To enable these services, replace the opening tag of this
document with the following, and update the absolute path as appropriate for
your installation:
 -->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="file://C:/Program Files (x86)/RTI/ndds.5.1.0/resource/qos_profiles_5.1.0/schema/rti_dds_qos_profiles.xsd">
    <qos_library name="DefaultLibrary">
        <qos_profile name="Reliable" is_default_qos="true">        

        
          
            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI Analyzer tool, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>RTI Example (Reliable)</name>
                </participant_name>

        <receiver_pool>
          <buffer_size>65530</buffer_size>
        </receiver_pool>
        <property>
          <value>
            <element>
              <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
              <value>1048576</value>
            </element>
            <element>
              <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
              <value>65530</value>
            </element>
            <element>
              <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
              <value>65530</value>
            </element>
          </value>
        </property>
        <resource_limits>
          <type_code_max_serialized_length>65530</type_code_max_serialized_length>
          <type_object_max_serialized_length>65530</type_object_max_serialized_length>
        </resource_limits>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>
                
                
            </participant_qos>
        </qos_profile>
    </qos_library>
</dds>
